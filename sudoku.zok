struct Puzzle<N> {
    u8[N][N] elems;
}

struct Solution<N> {
    u8[N][N] elems;
}

// check each row is unique
def check_rows<N>(Solution<N> sol) -> bool {
    // for each row
    for u32 i in 0..N {
        // for each entry in the row
        for u32 j in 0..N {
            // check that the entry is not repeated
            for u32 k in 0..j {
                assert(sol.elems[i][j] != sol.elems[i][k]);
            }
        }
    }
    return true;
}

// check the puzzle matches the solution
// and the entries are constrained in the range 1..=N
def check_puzzle_solution<N>(Solution<N> sol, Puzzle<N> puzzle) -> bool {
    for u32 i in 0..N {
        for u32 j in 0..N {
            assert((sol.elems[i][j] > 0) && (sol.elems[i][j] < 10));
            assert((puzzle.elems[i][j] == 0) || (puzzle.elems[i][j] == sol.elems[i][j]));   
        }
    }
    return true;
}

def main(public Puzzle<2> puzzle, private Solution<2> sol) {
    assert(check_puzzle_solution(sol, puzzle));
    assert(check_rows(sol));
}
